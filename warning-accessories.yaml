blueprint:
  name: Device Availability and Battery Checker
  description: >
    Checks all entities/devices for availability (unavailable and optionally unknown states), and all entities/devices
    with the 'battery' device_class for battery level.

    Devices/entities that are not assigned to an area,
    or are assigned to areas where the name begins with an underscore (_),
    will not be monitored.

    The automation runs every X hours (default is 1 hour).

  domain: automation
  input:
    check_battery:
      name: Check Battery Levels?
      description: Enable to monitor devices with battery level below the configured value.
      default: true
      selector:
        boolean:
    battery_warning_level:
      name: Battery Warning Level
      description: Devices with battery level below the configured value are considered low battery.
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: "%"
          mode: slider
          step: 5.0
    check_unknown:
      name: Check Unknown States?
      description: Enable to monitor devices with state 'unknown'.
      default: false
      selector:
        boolean:
    trigger_interval_hours:
      name: Trigger Interval (hours)
      description: Run the automation every X hours.
      default: 1
      selector:
        number:
          min: 1
          max: 24
          unit_of_measurement: "hours"
          mode: slider
          step: 1

variables:
  check_battery: !input check_battery
  check_unknown: !input check_unknown
  battery_warning_level: !input battery_warning_level
  trigger_interval_hours: !input trigger_interval_hours
  non_critical_entities: ['update', 'firmware', 'automation']
  ignore_unknown_entities: ['button', 'select', 'person', 'stt']
  items: >
    {% set entities = namespace(data=[]) %}

    {# Process entities that are unavailable or unknown (if enabled) #}
    {% for state in states if state.state == 'unavailable' or (check_unknown and state.state == 'unknown') %}
      {% set add_entity = true %}
      {% set area = area_name(state.entity_id) or '' %}
      {% if area.startswith('_') %}
        {% set add_entity = false %}
      {% endif %}
      {% if state.entity_id.split('.')[0] in non_critical_entities or (state.state == 'unknown' and state.entity_id.split('.')[0] in ignore_unknown_entities) %}
        {% set add_entity = false %}
      {% endif %}

      {% if add_entity %}
        {% set entities.data = entities.data + [{
          'entity_id': state.entity_id,
          'device_id': (device_id(state.entity_id) or 'no_device'),
          'device_name': (device_attr(state.entity_id, 'name_by_user') or device_attr(state.entity_id, 'name') or state_attr(state.entity_id, 'friendly_name') or 'unknown'),
          'area_id': (area_id(state.entity_id) or 'no_area'),
          'entity_name': (state_attr(state.entity_id, 'friendly_name') or state.name or 'unknown'),
          'state': state.state
        }] %}
      {% endif %}
    {% endfor %}

    {# Check battery levels if enabled #}
    {% if check_battery %}
      {# Binary sensors with device_class 'battery' and state 'on' #}
      {% for state in states.binary_sensor | selectattr('attributes.device_class', 'equalto', 'battery') | selectattr('state', 'equalto', 'on') %}
        {% set add_entity = true %}
        {% set area = area_name(state.entity_id) or '' %}
        {% if area.startswith('_') %}
          {% set add_entity = false %}
        {% endif %}

        {% if add_entity %}
          {% set entities.data = entities.data + [{
            'entity_id': state.entity_id,
            'device_id': (device_id(state.entity_id) or 'no_device'),
            'device_name': (device_attr(state.entity_id, 'name_by_user') or device_attr(state.entity_id, 'name') or state_attr(state.entity_id, 'friendly_name') or 'unknown'),
            'area_id': (area_id(state.entity_id) or 'no_area'),
            'entity_name': (state_attr(state.entity_id, 'friendly_name') or state.name or 'unknown'),
            'state': 'low battery'
          }] %}
        {% endif %}
      {% endfor %}

      {# Sensors with device_class 'battery' and low battery level #}
      {% for state in states.sensor | selectattr('attributes.device_class', 'equalto', 'battery') %}
        {% set battery_level = state.state | float(default=-1) %}
        {% if battery_level >= 0 and battery_level < battery_warning_level %}
          {% set add_entity = true %}
          {% set area = area_name(state.entity_id) or '' %}
          {% if area.startswith('_') %}
            {% set add_entity = false %}
          {% endif %}

          {% if add_entity %}
            {% set entities.data = entities.data + [{
              'entity_id': state.entity_id,
              'device_id': (device_id(state.entity_id) or 'no_device'),
              'device_name': (device_attr(state.entity_id, 'name_by_user') or device_attr(state.entity_id, 'name') or state_attr(state.entity_id, 'friendly_name') or 'unknown'),
              'area_id': (area_id(state.entity_id) or 'no_area'),
              'entity_name': (state_attr(state.entity_id, 'friendly_name') or state.name or 'unknown'),
              'state': 'low battery'
            }] %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}

    {{ entities.data }}

trigger:
  - platform: time_pattern
    minutes: 0

condition:
  - condition: template
    value_template: "{{ (now().hour | int) % (trigger_interval_hours | int) == 0 }}"

action:
  - service: rest_command.send_device_status
    data:
      payload: "{{ {'items': items} | to_json }}"

mode: single