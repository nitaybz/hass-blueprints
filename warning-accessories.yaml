blueprint:
  name: Device Availability and Battery Hourly Checker
  description: |
    Checks all entities/devices for availability (unavailable and optionally unknown states), and all entities/devices
    with the 'battery' device_class for battery level.

    Devices/entities that are not assigned to an area, 
    or are assigned to areas where the name begins with an underscore (_), 
    or are explicitly excluded, will not be monitored.
    To monitor devices that are not fixed to a specific area, simply create a pseudo-area, such as "Roaming" or "Nowhere" and add the devices to that area.
  domain: automation
  source_url: https://raw.githubusercontent.com/briped/homeassistant/master/blueprints/device_availability_checker.yaml
  input:
    check_battery:
      name: Check Battery Levels?
      description: Enable to monitor devices with battery level below the configured value.
      default: true
      selector:
        boolean:
    battery_warning_level:
      name: Battery warning level
      description: Devices with battery level below the configured value are assumed to be low-battery (as well as binary battery sensors with value 'on').
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: "%"
          mode: slider
          step: 5.0
    check_unknown:
      name: Check Unknown States?
      description: Enable to monitor devices with state 'unknown'.
      default: false
      selector:
        boolean:
    exclude:
      name: Exclusions
      description: Areas/devices/entities to exclude from monitoring.
      default: []
      selector:
        target:
    actions:
      name: Actions
      description: Actions to run, such as notifications. Matched devices are returned with the <code>{{ items }}</code> dictionary.
      selector:
        action:
variables:
  check_battery: !input check_battery
  check_unknown: !input check_unknown
  battery_warning_level: !input battery_warning_level
  exclude: !input exclude
  non_critical_entities: ['update', 'firmware', 'sensor.update', 'sensor.firmware'] 
  ignore_unknown_entities: ['button', 'select']
  items: >
    {% set devices = namespace(data={}) %}

    {# Function to safely get area name #}
    {% macro get_area(entity_id) %}
      {% set area = area_name(entity_id) %}
      {{ area if area else '' }}
    {% endmacro %}

    {# Process entities that are unavailable or unknown (if enabled) #}
    {% for state in states if state.state == 'unavailable' or (check_unknown and state.state == 'unknown') %}
      {% set add_entity = true %}
      {% set area = get_area(state.entity_id) %}
      {% if area == '' or area.startswith('_') %}
        {% set add_entity = false %}
      {% endif %}
      {% if exclude.entity_id is defined and state.entity_id in exclude.entity_id %}
        {% set add_entity = false %}
      {% endif %}
      {% if exclude.area_id is defined and area_id(state.entity_id) in exclude.area_id %}
        {% set add_entity = false %}
      {% endif %}
      {% if state.entity_id.split('.')[0] in non_critical_entities or (state.state == 'unknown' and state.entity_id.split('.')[0] in ignore_unknown_entities) %}
        {% set add_entity = false %}
      {% endif %}

      {% if add_entity %}
        {% set device_id = device_id(state.entity_id) or 'no_device_id' %}
        {% set entity_info = {
          'entity_id': state.entity_id,
          'entity_name': state_attr(state.entity_id, 'friendly_name') or state.name,
          'state': state.state
        } %}
        {% if device_id not in devices.data %}
          {% set device_info = {
            'device_name': device_attr(state.entity_id, 'name'),
            'friendly_name': device_attr(state.entity_id, 'name_by_user') or device_attr(state.entity_id, 'name'),
            'area_id': area_id(state.entity_id),
            'affected_entities': [entity_info]
          } %}
          {% set devices.data[device_id] = device_info %}
        {% else %}
          {% set devices.data[device_id]['affected_entities'] = devices.data[device_id]['affected_entities'] + [entity_info] %}
        {% endif %}
      {% endif %}
    {% endfor %}

    {# Check battery levels if enabled #}
    {% if check_battery %}
      {# Binary sensors with device_class 'battery' and state 'on' #}
      {% for state in states.binary_sensor | selectattr('attributes.device_class', 'equalto', 'battery') | selectattr('state', 'equalto', 'on') %}
        {% set add_entity = true %}
        {% set area = get_area(state.entity_id) %}
        {% if area == '' or area.startswith('_') %}
          {% set add_entity = false %}
        {% endif %}
        {% if exclude.entity_id is defined and state.entity_id in exclude.entity_id %}
          {% set add_entity = false %}
        {% endif %}
        {% if exclude.area_id is defined and area_id(state.entity_id) in exclude.area_id %}
          {% set add_entity = false %}
        {% endif %}

        {% if add_entity %}
          {% set device_id = device_id(state.entity_id) or 'no_device_id' %}
          {% set entity_info = {
            'entity_id': state.entity_id,
            'entity_name': state_attr(state.entity_id, 'friendly_name') or state.name,
            'state': 'low battery'
          } %}
          {% if device_id not in devices.data %}
            {% set device_info = {
              'device_name': device_attr(state.entity_id, 'name'),
              'friendly_name': device_attr(state.entity_id, 'name_by_user') or device_attr(state.entity_id, 'name'),
              'area_id': area_id(state.entity_id),
              'affected_entities': [entity_info]
            } %}
            {% set devices.data[device_id] = device_info %}
          {% else %}
            {% set devices.data[device_id]['affected_entities'] = devices.data[device_id]['affected_entities'] + [entity_info] %}
          {% endif %}
        {% endif %}
      {% endfor %}

      {# Sensors with device_class 'battery' and low battery level #}
      {% for state in states.sensor | selectattr('attributes.device_class', 'equalto', 'battery') %}
        {% if state.state | float(-1) < battery_warning_level | float(0) %}
          {% set add_entity = true %}
          {% set area = get_area(state.entity_id) %}
          {% if area == '' or area.startswith('_') %}
            {% set add_entity = false %}
          {% endif %}
          {% if exclude.entity_id is defined and state.entity_id in exclude.entity_id %}
            {% set add_entity = false %}
          {% endif %}
          {% if exclude.area_id is defined and area_id(state.entity_id) in exclude.area_id %}
            {% set add_entity = false %}
          {% endif %}

          {% if add_entity %}
            {% set device_id = device_id(state.entity_id) or 'no_device_id' %}
            {% set entity_info = {
              'entity_id': state.entity_id,
              'entity_name': state_attr(state.entity_id, 'friendly_name') or state.name,
              'state': 'low battery'
            } %}
            {% if device_id not in devices.data %}
              {% set device_info = {
                'device_name': device_attr(state.entity_id, 'name'),
                'friendly_name': device_attr(state.entity_id, 'name_by_user') or device_attr(state.entity_id, 'name'),
                'area_id': area_id(state.entity_id),
                'affected_entities': [entity_info]
              } %}
              {% set devices.data[device_id] = device_info %}
            {% else %}
              {% set devices.data[device_id]['affected_entities'] = devices.data[device_id]['affected_entities'] + [entity_info] %}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}

    {{ devices.data.values() | list | tojson }}
trigger:
  - platform: time_pattern
    minutes: "0"
condition: []
action:
  - choose: []
    default: !input actions
mode: single